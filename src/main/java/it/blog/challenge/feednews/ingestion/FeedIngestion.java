package it.blog.challenge.feednews.ingestion;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import it.blog.challenge.feednews.bean.Feed;
import it.blog.challenge.feednews.bean.bbc.BbcNews;
import it.blog.challenge.feednews.bean.hackernews.Hacker;
import it.blog.challenge.feednews.bean.hackernews.HackerList;
import it.blog.challenge.feednews.bean.nytimes.Nytimes;

@Component
public class FeedIngestion {

	private final Logger log = LoggerFactory.getLogger(this.getClass());
	
	@Value("${feed.nytimes.url}")
	String nyTimesUrl;

	@Value("${feed.hacker.list.url}")
	String hackerListUrl;

	@Value("${feed.hacker.detail.url}")
	String hackerDetailUrl;

	@Value("${feed.bbc.url}")
	String bbcUrl;

	@Value("${hacker.article.limit}")
	int hackerArticleLimit;

	@Autowired
	RestTemplate restTemplate;
	
	@Autowired
	AsyncNews asyncNews;

	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {
		return builder.build();
	}

	/**
	 * 
	 * News From Hacker parallely
	 * 
	 * @return
	 * @throws Exception
	 */
	public HackerList getNewsFromHacker() throws InterruptedException, ExecutionException {

		log.debug("Start getting news from NewsHacker...");
		
		String[] articleId = restTemplate.getForObject(hackerListUrl, String[].class);

		HackerList hackerList = new HackerList();
		 
		List<CompletableFuture<Hacker>> hackerItem = new ArrayList<CompletableFuture<Hacker>>();

		int countOfArticle = 0;

		log.debug(String.format("Number of articles: %s", articleId.length));
		
		for (String item : articleId) {

	        // Kick of multiple, asynchronous lookups
			hackerItem.add(asyncNews.getNewsDetail(hackerDetailUrl, item));

			if (countOfArticle > hackerArticleLimit)
				break;

			countOfArticle++;
		}
		
		log.debug(String.format("Number of articles in queue: %s", countOfArticle));
		
        // Wait until they are all done
		CompletableFuture.allOf(hackerItem.toArray(new CompletableFuture[hackerItem.size()])).join();
        
        List<Hacker> hackers = hackerList.getHacker();
        /*
         *
         * Cannot use lambda expression due Exception generated by CompletableFuture class
         * hackers = hackerItem.stream().map(CompletableFuture::get).collect(Collectors.toList());
         */
		for (CompletableFuture<Hacker> item : hackerItem)
			hackers.add(item.get());

		log.debug("Finish getting news from NewsHacker");
		
		return hackerList;
	}

	/**
	 * 
	 * News From Ny Times
	 * 
	 * @return
	 */
	public Nytimes getNewsFromNyTimes() {

		log.debug("Start getting news from Nyt...");
		
		Nytimes nytimes = restTemplate.getForObject(nyTimesUrl, Nytimes.class);
		
		log.debug("Finish getting news from Nyt...");

		return nytimes;

	}

	/**
	 * 
	 * News From Bbc
	 * 
	 * @return
	 */
	public BbcNews getNewsBbc() {

		log.debug("Start getting news from Bbc...");
		
		BbcNews bbc = restTemplate.getForObject(bbcUrl, BbcNews.class);

		log.debug("Finish getting news from Nyt...");
		
		return bbc;

	}

	public List<Feed> ingestionFeeds() throws InterruptedException, ExecutionException {
		
		log.debug("Start Feed ingestion...");
		/*
		 * Get news
		 */
		HackerList hackerList = this.getNewsFromHacker();
		log.debug("Got Hackernews...");
		
		Nytimes nytimes = this.getNewsFromNyTimes();
		log.debug("Got Nyt...");
		
		BbcNews bbc = this.getNewsBbc();
		log.debug("Got Bbc...");

		/*
		 * Aggregate
		 */
		log.debug("Start Feed aggregation...");
		List<Feed> feed = new ArrayList<Feed>();
		feed.addAll(hackerList.getHacker());
		feed.addAll(Arrays.asList(nytimes.getResults()));
		feed.addAll(Arrays.asList(bbc.getArticles()));

		log.debug("Aggregation completed!");
		
		return feed;
	}

}
